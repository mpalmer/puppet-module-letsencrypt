#!/usr/bin/env ruby

require 'openssl'
require 'acme-client'

endpoint = if ENV['LE'] == 'staging'
	'https://acme-staging.api.letsencrypt.org/'
else
	'https://acme-v01.api.letsencrypt.org/'
end

KEY_FILE = "/var/lib/letsencrypt/keys/letsencrypt.key"

private_key = OpenSSL::PKey::RSA.new(File.read(KEY_FILE))
client = Acme::Client.new(private_key: private_key, endpoint: endpoint, connection_options: { request: { open_timeout: 5, timeout: 5 } })

certs_to_renew = Dir["/var/lib/letsencrypt/certs/*.pem"].select do |f|
	OpenSSL::X509::Certificate.new(File.read(f)).not_after < Time.now + 30
end

certs_to_renew.each do |f|
	cert = OpenSSL::X509::Certificate.new(File.read(f))
	names = cert.extensions.find { |ex| ex.oid == 'subjectAltName' }.value.split(', ').select { |n| n =~ /^DNS:/ }.map { |n| n.sub(/^DNS:/, '') }

	names.each do |d|
		authz = client.authorize(domain: d)
		challenge = authz.http01

		File.write("/var/lib/letsencrypt/acme-challenge/#{challenge.filename.sub('.well-known/acme-challenge/', '')}", challenge.file_content)

		challenge.request_verification
		while challenge.verify_status == "pending"
			sleep 1
		end

		if challenge.verify_status != 'valid'
			puts "Verification failed for #{d} (verify status: #{challenge.verify_status})"
		end
	end

	csr = Acme::Client::CertificateRequest.new(names: names)
	cert = client.new_certificate(csr)

	File.write("/var/lib/letsencrypt/keys/#{File.basename(f)}", cert.request.private_key.to_pem)
	File.write(f, cert.fullchain_to_pem)
end
